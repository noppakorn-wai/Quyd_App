using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Parse;

namespace Quyd.Model
{
    class ItemList
    {
        private List<Item> items;

        public ItemList()
        {
            items = new List<Item>();
        }

        //load all item
        public async Task LoadAsync()
        {
            var query = from item_t in ParseObject.GetQuery("Item")
                        where true
                        select item_t;
            try
            {
                var items_t = await query.FindAsync();
                foreach (var item in items_t)
                {
                    items.Add(new Item(item));
                }
            }
            catch (ParseException ex)
            {
                if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                {
                    items = new List<Item>();
                }
            }
        }

        //load store available item
        public async Task LoadAsync(Store store)
        {
            var query = from pricing in ParseObject.GetQuery("Pricing").Include("item")
                        where pricing.ObjectId == store.getObject().ObjectId
                        select pricing;
            try
            {
                var pricing = await query.FindAsync();
                foreach (var price in pricing)
                {
                    ParseObject item = price.Get<ParseObject>("item");
                    items.Add(new Item(item, price));
                }
            }
            catch (ParseException ex)
            {
                if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                {
                    items = new List<Item>();
                }
            }
        }

        //load post available item
        public async Task LoadAsync()
        {
            var query = from item_t in ParseObject.GetQuery("Item")
                        where true
                        select item_t;
            try
            {
                var items_t = await query.FindAsync();
                foreach (var item in items_t)
                {
                    items.Add(new Item(item));
                }
            }
            catch (ParseException ex)
            {
                if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                {
                    items = new List<Item>();
                }
            }
        }

        public int size()
        {
            return items.Count;
        }
    }

    class Item
    {
        ParseObject item;
        PhotoList photos;
        ParseObject price;
        //Reconsider
        double quantity;
        Post post;

        public Item(ParseObject item)
        {
            this.item = item;
            photos = new PhotoList();
            price = null;
        }

        public Item(ParseObject item, ParseObject price)
        {
            this.item = item;
            this.price = price;
        }

        public string getType()
        {
            return item.Get<string>("type");
        }

        public string getName()
        {
            return item.Get<string>("name");
        }

        public string getDescription()
        {
            return item.Get<string>("description");
        }

        public string getMaterial()
        {
            return item.Get<string>("material");
        }

        public string getMaterialType()
        {
            return item.Get<string>("materialType");
        }

        public string getIcon()
        {
            return item.Get<string>("icon");
        }

        public async Task<double> getPriceAsync(Store targetStore)
        {
            //May error
            if (price == null || price.Get<string>("store") != targetStore.getObject().ObjectId)
            {
                var query = from pricing in ParseObject.GetQuery("Pricing")
                            where pricing.Get<string>("store") == targetStore.getObject().ObjectId
                            where pricing.Get<string>("item") == item.ObjectId
                            select pricing;
                try
                {
                    price = await query.FirstAsync();
                }
                catch (ParseException ex)
                {
                    if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                    {
                        //no pricing found
                        return 0;
                    }
                }
            }

            return price.Get<double>("price");
        }

        public async Task<double> getPriceAsync(Post targetPost)
        {
            //May error
            if ( == null || price.Get<string>("store") != targetStore.getObject().ObjectId)
            {
                var query = from pricing in ParseObject.GetQuery("Pricing")
                            where pricing.Get<string>("store") == targetStore.getObject().ObjectId
                            where pricing.Get<string>("item") == item.ObjectId
                            select pricing;
                try
                {
                    price = await query.FirstAsync();
                }
                catch (ParseException ex)
                {
                    if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                    {
                        //no pricing found
                        return 0;
                    }
                }
            }

            return price.Get<double>("price");
        }

        public async Task setPriceAsync(double itemPrice, Store targetStore)
        {
            price = new ParseObject("Pricing");

            price["price"] = itemPrice;
            price["store"] = targetStore;
            price["item"] = item.ObjectId;

            try
            {
                await price.SaveAsync();
            }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public async Task<PhotoList> getPhotosAsync()
        {
            if (photos.size() == 0)
            {
                await photos.loadAsync(item.ObjectId);
            }
            return photos;
        }

        public ParseObject getObject()
        {
            return item;
        }
    }

    class PhotoList
    {
        private List<Photo> photos;

        public PhotoList()
        {
            photos = new List<Photo>();
        }

        public async Task loadAsync(string itemId)
        {
            var query = from photos_t in ParseObject.GetQuery("itemPhoto")
                        where photos_t.ObjectId == itemId
                        select photos_t;
            try
            {
                var photos_t = await query.FindAsync();

                foreach (var photo in photos_t)
                {
                    //put group function here
                    photos.Insert(0, new Photo(photo));
                }
            }
            catch (ParseException ex)
            {
                if (ex.Code == ParseException.ErrorCode.ObjectNotFound)
                {
                    photos = new List<Photo>();
                }
            }
        }

        public int size()
        {
            return photos.Count;
        }

    }
    class Photo
    {
        ParseObject photo;

        public Photo(ParseObject photo)
        {
            this.photo = photo;
        }

        public string getDescription(int i)
        {
            return photo.Get<string>("description");
        }

        public string getLink(int i)
        {
            return photo.Get<string>("link");
        }
    }
}
